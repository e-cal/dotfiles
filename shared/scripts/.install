#!/usr/bin/env bash

DOTFILES="$HOME/.dotfiles"
HOST_DOTFILES="$HOME/.dotfiles/$HOSTNAME"
SHARED_DOTFILES="$HOME/.dotfiles/shared"

confirm() {
    if [[ $# > 0 ]]; then
        message="$@ (y/n) "
    else
        message="Continue? (y/n) "
    fi

    printf "$message"
    old_stty_cfg=$(stty -g)
    stty raw -echo
    answer=$(while ! head -c 1 | grep -i '[ny]'; do true; done)
    stty $old_stty_cfg

    if [ "$answer" != "${answer#[Yy]}" ]; then
        echo Yes
        return 0
    else
        echo No
        return 1
    fi
}

if ! hostnamectl | grep -q "NixOS"; then # not nixos, get nix and dependencies
    if ! command -v nix-env &> /dev/null; then
	echo "Installing nix..."
        sh <(curl -L https://nixos.org/nix/install) --daemon
    fi

    if hostnamectl | grep -q "Ubuntu" && confirm "Install dependencies?"; then
        sudo apt install zsh git stow bat python3 python3-venv python3-pip
        curl -LsSf https://astral.sh/uv/install.sh | sh
        # jetson packages: https://pypi.jetson-ai-lab.dev/jp6/cu126
        pip install https://pypi.jetson-ai-lab.dev/jp6/cu126/torch-2.1.0-cp38-cp38-linux_aarch64.whl # cuda 12.6 pytorch
        curl -L https://raw.githubusercontent.com/catppuccin/gnome-terminal/v1.0.0/install.py | python -
        mkdir ~/.fonts && curl -OL https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.tar.xz && tar -xvf JetBrainsMono.tar.xz -C ~/.fonts
    fi

    # sudo apt install nvidia-jetson-services
fi

# if confirm "Install submodules (neovim config)?"; then
if [[ ! -d $HOME/.config/nvim ]]; then
    echo "Cloning neovim config..."
    pushd $DOTFILES
    git submodule update --init --recursive
    popd
fi

# if confirm "Prepare local .config?"; then
# Make dirs that shouldn't be pure symlinks (i.e. stores local data in config)
[[ -d $HOME/.config ]] || mkdir $HOME/.config
[[ -d $HOME/.config/zsh ]] || mkdir $HOME/.config/zsh
[[ -d $HOME/.config/jupyter ]] || mkdir -p $HOME/.config/jupyter/profile_default
[[ -d $HOME/.config/obsidian ]] || mkdir -p $HOME/.config/obsidian
[[ -d $HOME/.config/lazygit ]] || mkdir $HOME/.config/lazygit
[[ -d $HOME/.config/nixos ]] || mkdir $HOME/.config/nixos
[[ -d "$HOME/.config/Code/User" ]] || mkdir -p $HOME/.config/Code/User
[[ -d "$HOME/projects" ]] || mkdir $HOME/projects

# Remove common conflicts
[[ ! -L $HOME/.config/wgetrc ]] && [[ -f $HOME/.config/wgetrc ]] && rm $HOME/.config/wgetrc
[[ ! -L $HOME/.config/mimeapps.list ]] && [[ -f $HOME/.config/mimeapps.list ]] && rm $HOME/.config/mimeapps.list
[[ ! -L $HOME/.config/user-dirs.dirs ]] && [[ -f $HOME/.config/user-dirs.dirs ]] && rm $HOME/.config/user-dirs.dirs
[[ ! -L $HOME/.config/lazygit/config.yml ]] && [[ -f $HOME/.config/lazygit/config.yml ]] && rm $HOME/.config/lazygit/config.yml
[[ ! -L $HOME/.config/obsidian/Custom\ Dictionary.txt ]] && [[ -f $HOME/.config/obsidian/Custom\ Dictionary.txt ]] && rm $HOME/.config/obsidian/Custom\ Dictionary.txt
[[ ! -L $HOME/.zshenv ]] && [[ -f $HOME/.zshenv ]] && rm $HOME/.zshenv
# fi

# if confirm "Stow config?"; then
[[ ! $(command -v stow) ]] && echo "first install stow" && exit 1

read -p "hostname ($HOSTNAME): " hostname
hostname="${hostname:-$HOSTNAME}"
HOST_DOTFILES="$HOME/.dotfiles/$hostname"
# echo $HOST_DOTFILES

if [[ ! -d $HOST_DOTFILES ]] || confirm "Sync host ($hostname) with shared dotfiles?"; then
    echo "Generating dotfiles for $hostname"
    mkdir -p $HOST_DOTFILES/.config/nixos

    if hostnamectl | grep -q "NixOS" && [[ ! -f $HOST_DOTFILES/.config/nixos/host.nix ]]; then
        echo "Creating blank host.nix template..."
        cp $DOTFILES/shared/.config/nixos/host-template.nix $HOST_DOTFILES/.config/nixos/host.nix
    fi

    stow -R --dir=$SHARED_DOTFILES .config --target=$HOST_DOTFILES/.config --ignore=host-template.nix --ignore="user-dirs.dirs"
    stow -R --dir=$DOTFILES shared --target=$HOST_DOTFILES --ignore=.config
fi
echo "Linking dotfiles to local system"
stow -R --dir=$DOTFILES $hostname --target=$HOME
if [[ $? -ne 0 ]]; then
    echo "Failed to link dotfiles"
    if confirm "Try again with --adopt (overwrites shared dotfiles with local)?"; then
        stow -R --dir=$DOTFILES $hostname --target=$HOME --adopt
    else
        exit
    fi
fi

if hostnamectl | grep -q "NixOS"; then
    if confirm "Rebuild nixos?"; then
        pushd ~/.config/nixos &>/dev/null
        sudo cp *.nix /etc/nixos/
        { sudo nixos-rebuild switch --flake /etc/nixos#default --impure 2>&1 | tee nixos-switch.log; } || cat nixos-switch.log | grep --color error >&2
        popd &>/dev/null
    fi
else
    if confirm "Install packages?"; then
        nix-env -f ~/.config/nix/packages.nix -i
    fi
fi
# fi
