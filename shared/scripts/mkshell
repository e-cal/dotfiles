#!/usr/bin/env bash

if [[ -f shell.nix ]]; then
    echo "shell.nix already exists"
    exit 1
fi

cat <<'EOF' >shell.nix
{ pkgs ? import <nixpkgs> { config = { allowUnfree = true; }; } }:

let
  python = pkgs.python311;

  pythonWithPkgs = python.withPackages
    (pythonPkgs: with pythonPkgs; [ pip setuptools wheel ipython jupyter ]);

  deps = with pkgs; [
    clang
    llvmPackages_16.bintools
    rustup
    linuxPackages.nvidia_x11
    freeglut
    zlib
    gcc
    stdenv.cc.cc.lib
    stdenv.cc
    libGLU
    libGL
    glib
    pango
    fontconfig
    python311Packages.matplotlib
  ];

  lib-path = with pkgs; lib.makeLibraryPath deps;
  extra-ldflags = "-L${pkgs.linuxPackages.nvidia_x11}/lib";

in pkgs.mkShell {
  name = "NAME";

  buildInputs = deps ++ [
    pythonWithPkgs
    pkgs.readline
    pkgs.libffi
    pkgs.openssl
    pkgs.git
    pkgs.openssh
    pkgs.rsync
  ];

  shellHook = ''
    SOURCE_DATE_EPOCH=$(date +%s)
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${lib-path}
    export CUDA_PATH=${pkgs.cudatoolkit}
    export EXTRA_LDFLAGS=${extra-ldflags}
    [[ ! -f .venv ]] && setvenv
    VENV=$(cat .venv)
    source $VIRTUALENV_HOME/$VENV/bin/activate
    deactivate
    exec zsh
  '';
}
EOF

if [[ -z "$1" ]]; then
	read -p "Enter name [nix-shell]: " name
	name=${name:-"nix-shell"}
else
	name=$1
fi

sed -i "s/NAME/${name}/" shell.nix

echo "pip install jupynium for notebook support"
