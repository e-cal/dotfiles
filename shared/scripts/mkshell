#!/usr/bin/env bash

if [[ -f shell.nix ]]; then
    echo "shell.nix already exists"
    exit 1
fi

cat <<'EOF' >shell.nix
{ pkgs ? import <nixpkgs> { config = { allowUnfree = true; }; } }:

let
  python = pkgs.python311;

  pythonWithPkgs = python.withPackages (ps:
    with ps; [
      pip
      setuptools
      wheel
      ipython
      jupyter
      (catppuccin.overridePythonAttrs (oldAttrs: {
        propagatedBuildInputs = (oldAttrs.propagatedBuildInputs or [ ])
          ++ [ pygments ];
      }))
      pygments
    ]);

  deps = with pkgs; [
    clang
    llvmPackages_16.bintools
    rustup
    linuxPackages.nvidia_x11
    freeglut
    zlib
    gcc
    stdenv.cc.cc.lib
    stdenv.cc
    libGLU
    libGL
    glib
    pango
    fontconfig
    python311Packages.matplotlib
  ];

  lib-path = with pkgs; lib.makeLibraryPath deps;
  extra-ldflags = "-L${pkgs.linuxPackages.nvidia_x11}/lib";

in pkgs.mkShell {
  name = "{name}";

  buildInputs = deps ++ [
    pythonWithPkgs
    pkgs.readline
    pkgs.libffi
    pkgs.openssl
    pkgs.git
    pkgs.openssh
    pkgs.rsync
  ];

  shellHook = ''
{shellHook}
  '';
}
EOF

def_shell_hook=$(
    cat <<'EOF'
    SOURCE_DATE_EPOCH=$(date +%s)
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${lib-path}
    export CUDA_PATH=${pkgs.cudatoolkit}
    export EXTRA_LDFLAGS=${extra-ldflags}
    export TZ="America/Toronto"
    exec zsh
EOF
)

py_shell_hook=$(
    cat <<'EOF'
    SOURCE_DATE_EPOCH=$(date +%s)
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${lib-path}
    export CUDA_PATH=${pkgs.cudatoolkit}
    export EXTRA_LDFLAGS=${extra-ldflags}
    export TZ="America/Toronto"
    [[ ! -f .venv ]] && setvenv
    VENV=$(cat .venv)
    source $VIRTUALENV_HOME/$VENV/bin/activate
    deactivate
    exec zsh
EOF
)

if [[ -z "$1" ]]; then
    read -p "Enter name [nix-shell]: " name
    name=${name:-"nix-shell"}

    read -p "Include python venv? [y/n]: " sel
    if [[ $sel == "y" ]]; then
        shell_hook=$py_shell_hook
    else
        shell_hook=$def_shell_hook
    fi
else
    name=$1

    if [[ $2 == "py" || $2 == "python" ]]; then
        shell_hook=$py_shell_hook
    else
        shell_hook=$def_shell_hook
    fi

fi

echo "$shell_hook" > shellhook.tmp

awk '
BEGIN {
    while ((getline line < "shellhook.tmp") > 0) {
        shellhook = shellhook line "\n"
    }
    close("shellhook.tmp")
}
/{shellHook}/ {
    gsub(/{shellHook}/, shellhook)
}
/{name}/ {
    gsub(/{name}/, "'"$name"'")
}
{
    print
}
' shell.nix > shell.nix.tmp && mv shell.nix.tmp shell.nix

rm shellhook.tmp
