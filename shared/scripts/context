#!/usr/bin/env bash

find_project_root() {
    local dir="$PWD"
    while [[ "$dir" != "/" ]]; do
        if [[ -d "$dir/.git" ]]; then
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    echo "$PWD"
}

PROJECT_ROOT=$(find_project_root)
cd "$PROJECT_ROOT" || exit 1

if [[ $1 == "tree" ]]; then
    eza --tree --group-directories-last --sort=size --color=never -I '.git|.venv' | wl-copy
    exit 0
fi

initial_query=""
if [[ -n $1 ]]; then
    initial_query=$(printf "%s " "$@")
fi

selected_files=$(find . -type f -not -path "*/\.*" -not -path "*/node_modules/*" |
    sed 's|^\./||' |
    fzf --multi --bind 'space:toggle' --preview 'bat --color=always --style=plain {}' --preview-window='right:60%' --query="$initial_query")

if [[ -z "$selected_files" ]]; then
    echo "No files selected"
    exit 0
fi

get_language() {
    local file="$1"
    local ext="${file##*.}"
    case "$ext" in
    py) echo "python" ;;
    js) echo "javascript" ;;
    ts) echo "typescript" ;;
    rs) echo "rust" ;;
    rb) echo "ruby" ;;
    sh) echo "bash" ;;
    md) echo "markdown" ;;
    yml) echo "yaml" ;;
    *)
        if [[ -f "$file" ]]; then
            first_line=$(head -n 1 "$file")
            if [[ "$first_line" =~ ^#! ]]; then
                if [[ "$first_line" =~ ^#!/usr/bin/env[[:space:]]+([^[:space:]]+) ]]; then
                    interpreter="${BASH_REMATCH[1]}"
                else
                    interpreter=$(echo "$first_line" | sed -E 's|^#!.*/([^/ ]+).*|\1|')
                fi
                case "$interpreter" in
                bash) echo "bash" ;;
                python|python3) echo "python" ;;
                ruby) echo "ruby" ;;
                node) echo "javascript" ;;
                *) echo "" ;;
                esac
            else
                echo ""
            fi
        else
            echo ""
        fi
        ;;
    esac
}

clipboard_content=""
while IFS= read -r file; do
    [[ -z "$file" ]] && continue

    if [[ -n "$clipboard_content" ]]; then
        printf -v clipboard_content '%s\n\n' "$clipboard_content"
    fi

    printf -v clipboard_content '%s%s\n' "$clipboard_content" "$file"
    lang=$(get_language "$file")
    printf -v clipboard_content '%s```%s\n' "$clipboard_content" "$lang"
    printf -v clipboard_content '%s%s\n' "$clipboard_content" "$(cat "$file")"
    printf -v clipboard_content '%s```\n' "$clipboard_content"

done < <(echo "$selected_files")

printf "%s" "$clipboard_content" | wl-copy
