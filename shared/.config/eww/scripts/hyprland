#!/usr/bin/env bash

focused="#F9A876"
unfocused="#F1B89B"
background="#e3c1c1"
empty="#383646"
urgent="#f38ba8"

focusedws=$(hyprctl -j monitors | jq -r '.[] | select(.focused == true) | .activeWorkspace.id')

declare -A occupied=([1]=0 [2]=0 [3]=0 [4]=0 [5]=0 [6]=0 [7]=0 [8]=0 [9]=0)
declare -A workspace_monitor
declare -A urgent_workspaces

get_status_color() {
    if [ "${urgent_workspaces[$1]}" == "true" ]; then
        echo -n "$urgent"
    elif [ "${occupied[$1]}" -eq 1 ]; then
        if [[ $(isfocused $1) == "true" ]]; then
            echo -n "$focused"
        else
            if [[ $(onmonitor $1) == "true" ]]; then
                echo -n "$unfocused"
            else
                echo -n "$background"
            fi
        fi
    else
        echo -n "$empty"
    fi
}

isfocused() {
    [[ "$focusedws" == "$1" ]] && echo "true" || echo "false"
}

onmonitor() {
    res=$(hyprctl -j monitors | jq -r '.[] | select(.activeWorkspace.id == '"$1"') | .id')
    [[ "$res" != "" ]] && echo "true" || echo "false"
}

workspace_event() {
    valid_workspaces=()
    # collect the active workspaces and their monitors
    while read -r k v; do 
        workspace_monitor[$k]="$v"
        valid_workspaces+=("$k")
    done < <(hyprctl -j workspaces | jq -jr '.[] | .id, " ", .monitor, "\n"')
    # destroy workspaces that are no longer occupied
    for i in "${!occupied[@]}"; do
        if [[ "${occupied[$i]}" -ne 0 && ! " ${valid_workspaces[@]} " =~ " ${i} " ]]; then
            occupied[$i]=0
        fi
    done
}

# get all app titles in a workspace
declare -A applist
update_applist() {
    len_limit=37
    for ws in "${!workspace_monitor[@]}"; do
        jq_script='
.[]
| select(.workspace.id == '"$ws"' and .title != "")
| {
  class: .class,
  title: .title,
  initialTitle: .initialTitle
}
| (
  if .class == "org.wezfurlong.wezterm" or .class == "kitty" or .class == "com.mitchellh.ghostty" then ""
  elif .title | contains("YouTube") then "󰗃"
  elif .class == "chromium-browser" then ""
  elif .class == "zen" then "󰺕"
  elif .class == "nemo" then ""
  elif .class == "obsidian" then "󱞁"
  elif .class == "thunderbird" then " Email"
  elif .class == "Slack" then " Slack"
  elif .initialTitle == "Spotify Premium" then ""
  elif .initialTitle == "flameshot-pin" then "󱦧"
  elif .class == "flameshot" then "󰄀"
  elif .class == "feh" then "󰋩"
  elif .class == "" then " "
  else .class
  end
) as $class
| (
  if .class == "org.wezfurlong.wezterm" or .class == "kitty" or .class == "com.mitchellh.ghostty" then
    .title | sub(":.*";"")
  elif .class == "obsidian" then
    .title | sub("-.*";"")
  elif .class == "chromium-browser" or .class == "zen" then
    .title | sub(" (-|—) (Chromium|Zen Browser)";""; "g")
  else
    .title 
  end
  | (if length > '"$len_limit"' then .[0:'"$len_limit"'] + "-" else . end)
) as $title
| (
  if .class == "Spotify" or .class == "thunderbird" or .class == "Slack" then
    $class
  else
    $class + " " + $title
  end
)
| gsub("\\\\"; "\\\\\\\\")
+ "\\n"
'
        apps=$(hyprctl -j clients | jq -jr "$jq_script" | sed 's/"/\\"/g')
        applist[$ws]="${apps%\\n}"
    done
}

applist() {
    echo "${applist[$1]}"
}

generate() {
    echo -n '{"workspaces": ['

    for i in {1..9}; do
        echo -n ''"$([ "$i" -eq 1 ] || echo ,)" '{"number": '"$i"', "color": "'"$(get_status_color "$i")"'", "focused": "'"$(isfocused "$i")"'", "tooltip": "'$(applist "$i")'" }'
    done

    echo '], "screencast": '"$screencast"'}'
}

# setup
workspace_event
update_applist
screencast=false

for num in "${!workspace_monitor[@]}"; do
    occupied[$num]=1
done
generate

socat -u UNIX-CONNECT:$XDG_RUNTIME_DIR/hypr/"$HYPRLAND_INSTANCE_SIGNATURE"/.socket2.sock - | rg --line-buffered "workspace|mon(itor)?|screencast|openwindow|closewindow|windowtitlev2|urgent" | rg --line-buffered -v "workspacev2|destroy" | while read -r line; do
    should_update=true
    case ${line%>>*} in
    "workspace")
        workspace_event
        focusedws=${line#*>>}
        urgent_workspaces[$focusedws]="false"
        ;;
    "createworkspace")
        occupied[${line#*>>}]=1
        should_update=false
        ;;
    "focusedmon")
        focusedws=${line#*,}
        ;;
    "screencast")
        screencast=$([ "$(echo "${line#*>>}" | awk -F, '{print $1}')" -eq 1 ] && echo true || echo false)
        ;;
    "openwindow" | "closewindow" | "windowtitle")
        update_applist
        ;;
    "urgent")
        window=${line#*>>}
        urgent_ws=$(hyprctl -j clients | jq -r '.[] | select(.address == "'"0x$window"'") | .workspace.id')
        if [[ -n "$urgent_ws" ]] && [[ ! $urgent_ws == $focusedws ]]; then
            urgent_workspaces[$urgent_ws]="true"
        fi
        ;;
    "windowtitlev2")
        # don't update if its a terminal title change
        if $(echo "$line" | grep -q ">>[a-zA-Z0-9]\+,[a-zA-Z0-9]\+:[0-9]\+:[a-zA-Z0-9]\+"); then
            should_update=false
        else
            update_applist
        fi
        ;;
    esac
    if $should_update; then
        generate
    fi
done
