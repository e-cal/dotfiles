#!/usr/bin/env bash

# Add this script to your path, and make sure it is executable!
# (easiest way is to copy it or symlink it to /usr/bin)

# To auto-launch with your terminal, add:
# -c "tm startup || exec [shell]"
# to your shell in your terminal config.
# (see global/dot-config/kitty/kitty.conf for an example)

# To enable the floating window in tmux, add this line to your tmux.conf:
# bind-key Enter display-popup -E "tm"
# this binds the popup to <prefix>Enter.

################################################################################
# USER CONFIG
################################################################################

# Set your shell, startcmd, and project folders here
shell="zsh"
startcmd="triangles && echo"
declare -A project_dirs=(
	# Format:
	# ["dir"]="prefix" (applied to all sub-directories)
	# NOTE: prefix is recommended to avoid overwitting duplicate project names in the menu

	["$HOME/projects"]=""
	["$HOME/projects/praxis"]=""
)

# Add/rename individual projects here
# NOTE: Projects with punctuation in their name may not work correctly
#       e.g. "." gets changed to "_" by tmux when creating a session
declare -A projects=(
	# Format:
	# ["name"]="path"

	# Project name override (default has a "." in the name and will not work)
	["website"]="$HOME/projects/ecal.dev"

	# Adding projects
	["y3"]="$HOME/cloud/school/old/y3"
)

################################################################################
# END OF USER CONFIG
################################################################################

if [[ -n $startcmd ]]; then
	startcmd="$startcmd && exec $shell"
else
	startcmd="exec $shell"
fi

sessions=$(tmux ls 2>/dev/null | awk '{print $1}' | sed 's/://')

not_in_tmux() {
	[[ -z $TMUX ]]
}

session_exists() {
	tmux has-session -t="$1" &>/dev/null && true
}

attach_session() {
	if not_in_tmux; then
		if ! session_exists $1; then
			tmux new -s $1 -d -n main "$startcmd"
			# if [[ $1 == "scratch" ]]; then
			# 	tmux new-window -d -n todo "nvim ~/todo"
			# 	tmux new-window -d -n ipy "ipython --TerminalInteractiveShell.editing_mode=vi"
			# fi
		fi
		tmux attach -t $1
	else
		if ! session_exists $1; then
			tmux new -s $1 -d -n main "$startcmd"
		fi
		tmux switch -t $1
	fi

}

if [[ $# == 0 ]]; then
	if [[ -z $sessions ]]; then
		echo "starting a new tmux server..."
		sel="Ô°ûNEW"
	else
		sel=$(tm menu | fzf --header="tmux menu" --info="hidden" --bind "ctrl-d:execute(tm kill {})+reload(tm menu)")
		[[ -z $sel ]] && exit 1
	fi

	case $sel in
	Ô°ûPROJECT)
		tm project
		;;
	Ô°ûNEW)
		tm new
		;;
	Ô°ûEND)
		tm end
		;;
	Ô°ûKILL)
		tm kill
		;;
	Ô°ûRESET)
		tm reset
		;;
	*)
		tm attach $sel
		;;
	esac
else
	case $1 in

	new | n)
		if [[ -z $2 ]]; then
			name=$(
				read -p "session name: " -e tmp
				echo $tmp
			)
		else
			[[ $2 == "project" ]] && tm project "Ô°ûNEW" && exit
			name=$2
		fi

		[[ -z $name ]] && echo "no session name" && exit 1
		[[ $(tmux display-message -p '#S') == $name ]] && echo "cannot create a session with the same name as the current session" && exit 1

		if [[ -z $3 ]]; then
			from=$(find $HOME -maxdepth 5 -type d 2>/dev/null | sed 's,'"$HOME/"',,' | sed 's,'"$HOME"',home,' | fzf --header="start dir")
		else
			from=$3
		fi
		[[ -z $from ]] && from=$(pwd | sed 's,'"$HOME/"',,' | sed 's,'"$HOME"',home,') && echo "start dir not set, using $(pwd)"

		[[ $from == "home" || $from == "/home/ecal" ]] && cd ~ || cd "$HOME/$from"
		attach_session $name
		;;

	attach | a)
		if [[ -z $2 ]]; then
			cur=$(tmux display-message -p '#S')
			sessions="$sessions Ô°ûPROJECT Ô°ûNEW"
			if ! not_in_tmux; then
				sessions=$(echo $sessions | sed "s/\<$cur\>//")
			fi
			name=$(printf "%s\n" $sessions | fzf --header="attach menu" --info="hidden")
		else
			name=$2
		fi
		[[ -z $name ]] && echo "no selection" && exit 1

		if [[ $name == "Ô°ûNEW" ]]; then
			tm new || exit 1
		elif [[ $name == "Ô°ûPROJECT" ]]; then
			tm project || exit 1
		else
			attach_session $name || exit 1
		fi
		;;

	kill | k)
		if [[ -n $sessions ]]; then
			if [[ -n $2 ]]; then
				sel=$2
			else
				sessions="$sessions TMUX"
				sel=$(printf "%s\n" $sessions | fzf --header="kill menu" --info="hidden")
				[[ -z $sel ]] && exit 0
			fi

			if [[ $sel == "TMUX" ]]; then
				pgrep -f "bash.*tm startup" | xargs -n1 kill
				tmux kill-server
			else
				tmux kill-session -t $sel
			fi
		else
			echo "no tmux sessions"
			exit 1
		fi
		;;

	end | e)
		not_in_tmux && echo "not in a tmux session, nothing to end" && exit 1
		old=$(tmux display-message -p '#S')
		tm attach $2 && tm kill $old
		;;

	reset | r)
		not_in_tmux && echo "not in a tmux session, nothing to reset" && exit 1
		cur=$(tmux display-message -p '#S')
		tmp=$(uuidgen)
		tmux new -s $tmp -d && tmux switch -t $tmp && tmux send-keys -t $tmp "tm kill $cur && tm a $cur; tm kill $tmp" ENTER
		;;

	project | p)
		declare -A revp
		for k in "${!projects[@]}"; do
			if [[ -n ${projects[$k]} ]]; then
				revp[${projects[$k]}]="$k"
			fi
		done

		for project_dir in "${!project_dirs[@]}"; do
			for d in $project_dir/*; do
				if [[ ! -v "revp[$d]" ]] && [[ -d $d ]]; then
					name=$(echo $d | sed 's,'"$project_dir"'/,,' | tr -d '/')
					name="${project_dirs[$project_dir]}$name"
					projects["$name"]=$d
				fi
			done
		done

		if [[ -n $2 ]]; then
			sel=$2
		else
			projects["Ô°ûNEW"]=""
			sel=$(printf "%s\n" ${!projects[@]} | fzf --header="project menu" --info="hidden")
		fi
		[[ -z $sel ]] && exit 0

		# Make new project
		if [[ $sel = "Ô°ûNEW" ]]; then
			read -p "project name: " -e name
			sel_dir=$(printf "%s\n" ${!project_dirs[@]} | fzf --header="parent project directory" --info="hidden")
			prefixed="${project_dirs[$sel_dir]}$name"
			[[ -v "projects[$name]" ]] && echo "project already exists" && exit 1
			mkdir "$sel_dir/$name"
			tm project $prefixed
			exit
		else # not making new project
			# Project does not exist
			if [[ ! -v "projects[$sel]" ]]; then
				for pdir in ${!project_dirs[@]}; do
					maybe="${project_dirs[$pdir]}$sel"
					if [[ -v "projects[$maybe]" ]]; then
						echo -n "did you mean \"$maybe\" (y/n)? "
						old_stty_cfg=$(stty -g)
						stty raw -echo
						answer=$(while ! head -c 1 | grep -i '[ny]'; do true; done)
						stty $old_stty_cfg
						if echo "$answer" | grep -iq "^y"; then
							echo yes
							tm project $maybe
							exit
						else
							echo no
						fi
					fi
				done

				echo "project \"$sel\" does not exist"

				echo -n "create new project \"$sel\" (y/n)? "
				old_stty_cfg=$(stty -g)
				stty raw -echo
				answer=$(while ! head -c 1 | grep -i '[ny]'; do true; done)
				stty $old_stty_cfg
				if echo "$answer" | grep -iq "^y"; then
					echo yes
					sel_dir=$(printf "%s\n" ${!project_dirs[@]} | fzf --header="parent project directory" --info="hidden")
					mkdir "$sel_dir/$sel"
					tm project "${project_dirs[$sel_dir]}$sel"
				else
					echo no
				fi
				exit
			fi

			# Load project
			dir=${projects[$sel]}
			cd $dir
			attach_session $sel
			cd - &>/dev/null
		fi
		;;

	startup)
		wtitle=$(wmctrl -l | rg $(xprop -root _NET_ACTIVE_WINDOW | awk '{print $5}' | sed 's/0x//') | awk '{print $4}')
		if [[ $wtitle == "scratch" ]]; then
			attach_session "scratch"
			tm startup
		else
			if session_exists "main"; then
				tm
				[[ $? != 0 ]] && triangles && printf "\n\n\x1b[31mGoing in raw... üò≥\x1b[0m"
			else
				attach_session "main"
			fi
		fi
		;;

	list | l)
		printf "%s\n" $sessions
		;;

	menu)
		sessions="$sessions Ô°ûRESET Ô°ûKILL Ô°ûEND Ô°ûPROJECT Ô°ûNEW"
		printf "%s\n" $sessions
		;;

	toggle_term)
		hid() {
			tmux list-windows -F '#{window_name}' | grep -q 'Ôíâ '
		}

		no_bot() {
			tmux list-panes -F '#{pane_at_left} #{pane_at_top} #{pane_at_bottom}' | grep -q '1 1 1'
		}

		if hid; then
			tmux select-pane -t 0
			tmux join-pane -v -l 30% -s 'Ôíâ '
		elif no_bot; then
			tmux select-pane -t 0
			tmux split-window -c "#{pane_current_path}" -v -p 30
		else
			tmux select-pane -t 1
			tmux break-pane -d -n 'Ôíâ ' -t $(($(tmux list-windows -F '#{window_index}' | tail -n1) + 1))
			[[ $HOSTNAME = "coeus" ]] && sleep 0.01 || sleep 0.3
			tmux next-window
			tmux previous-window
		fi
		;;
	icon)
		sname=$(tmux display-message -p '#S')
		if [[ $sname == "scratch" ]]; then
			echo "ÔÅÑ"
		else
			if [[ -d "$HOME/projects/praxis/$sname" ]]; then
				echo "Ôáæ"
			else
				echo "Ôö¶"
			fi
		fi
		;;

	*)
		less <<'END'
Usage: tm [command]

Run tm without a command to use the main menu.

Commands
new [session-name] [start-dir]
	Creates a new tmux session. If a session name is not provided you will be prompted to enter one. If a start dir is not provided an fzf menu will let you select one, if you exit the menu without selecting a dir the working dir will be used (note this is always your home dir when using the popup).

attach [session-name]
	Attaches to a running tmux session. If a session name is not provided an fzf menu will let you select from your running sessions, or access the new and project commands.

project [project-name]
	Create a new session named after a project, with the project dir as the root dir of the session. Based on the user-defined project list + the dirs in your projects dir ($HOME/projects by default).

kill [session-name]
	Kills a tmux session. If a session name is not provided, an fzf menu will allow you to pick from the running sessions. Enter or select \TMUX\ to kill the tmux server.

end
	Ends (kills) the current tmux session and opens the attach menu.

reset
	Resets the current tmux session.

startup
	Utility command to use as the launch command for your terminal emulator.

END
		;;
	esac
fi
