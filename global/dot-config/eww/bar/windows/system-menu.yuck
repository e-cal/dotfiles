(defwidget system-menu []
  (box ; time & date
    :class "system-menu-box"
    :space-evenly false
    :orientation "v"
    (box
      :class "top-row"
      :space-evenly false
      (label
        :class "time text"
        :text "${time.hour}:${time.minute}")
      (box
        :class "date-box"
        :space-evenly false
        (label
          :class "date"
          :text {time.date})
        (label
          :class "day"
          :text {time.day})))

    (centerbox ; wifi/bluetooth/airplane buttons
      :class "system-row"
      (box
        :class "net-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element icon ${net.class}"
          :space-evenly true
          (button
            :class "net-button"
            :onclick "scripts/net toggle"
            {net.icon}))
        (label
          :class "text"
          :text {net.name}
          :xalign 0.5
          :justify "center"
          :wrap true))

      (box
        :class "bluetooth-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element icon ${bluetooth.class}"
          :space-evenly false
          (button
            :class "bluetooth-button"
            :onclick "scripts/bluetooth toggle"
            {bluetooth.icon})
          (label
            :class "separator"
            :text "│")
          (button
            :class "bluetooth-arrow-btn"
            :onclick "${EWW_CMD} close system-menu && blueberry"
            ""))
        (label
          :class "text"
          :text {bluetooth.text}
          :xalign 0.5
          :justify "center"
          :tooltip {bluetooth.battery}
          :wrap true))

      (box
        :class "airplane-box"
        :space-evenly false
        :orientation "v"
        (box
          :class "element"
          (button
            :class "airplane-button"
            :onclick "scripts/airplane toggle"
            ""))
        (label
          :class "text"
          :text "Airplane Mode"
          :xalign 0.5
          :limit-width 16)))

    (box ; brightness & volume sliders
      :class "sliders"
      :orientation "v"
      (box
        :class "volume-slider-box"
        :space-evenly false
        (button
          :class "volume-icon icon"
          :onclick "volume mute"
          {volume.icon})
        (scale
          :class "volume-bar"
          :value {volume.percent}
          :tooltip "${volume.percent}%"
          :onchange "volume set {}"))
      (box
        :class "brightness-slider-box"
        :space-evenly false
        (button
          :class "brightness-slider-icon icon"
          {brightness.icon})
        (scale
          :class "brightness-slider" 
          :value {brightness.percent} 
          :marks true 
          :onchange "brillo -S {}")))

    (box ; cpu & memory info
      :class "system-info-box"

      ; cpu
      (box
        :class "sys-box"
        :space-evenly false
        :halign "start"
        (circular-progress
          :value "${EWW_CPU.avg}"
          :class "sys-cpu"
          :thickness 3
          (label
            :text "󰘚"
            :class "sys-icon-cpu icon"))
        (box
          :class "text"
          :orientation "v"
          :vexpand false
          (label
            :text "cpu"
            :halign "start"
            :class "sys-text-cpu")
          (label
            :text "${round(EWW_CPU.avg,2)}%"
            :halign "start"
            :class "sys-text-sub")
          (label
            :text "${EWW_CPU.cores[0].freq} MHz"
            :halign "start"
            :class "sys-text-sub")))

      ; memory
      (box
        :class "sys-box"
        :space-evenly false
        :halign "end"
        (circular-progress
          :value "${round(EWW_RAM.used_mem_perc,0)}"
          :class "sys-mem"
          :thickness 3
          (label
            :text "󰍛"
            :class "sys-icon-mem icon"))
        (box
          :class "text"
          :orientation "v"
          (label
            :text "memory"
            :halign "start"
            :class "sys-text-mem")
          (label
            :text "${round(EWW_RAM.used_mem /1024/1024/1024,1)}GB used"
            :halign "start"
            :class "sys-text-sub")
          (label
            :text "${round(EWW_RAM.total_mem /1024/1024/1024,0)}GB total"
            :halign "start"
            :class "sys-text-sub"))))

    (centerbox ; battery info & power button
      :class "bottom-row"
      (box
        :class "battery-box"
        :space-evenly false
        :halign "start"
        (label
          :class "battery-icon icon"
          :style "color: ${battery.color}"
          :text {battery.icon})
        (label
          :class "text"
          :text "${battery.percentage}% ")
        (label
          :class "battery-wattage text"
          :text {battery.status}))
        ; (label
        ;   :class "battery-wattage text"
        ;   :text {battery.status != "Fully Charged" ? battery.time : ""}))
      (label) ; empty element; centerbox requires 3 children but we only need left/right
      (box ; power button
        :space-evenly false
        :halign "end"
        (button
          :halign "end"
          :class "power-button icon"
          :onclick "cloud umount all;shutdown now"
          "")))))

(defwindow system-menu
  :stacking "fg" 
  :monitor 1
  :geometry (geometry
    :x "0"
    :y "0"
    :width "0%"
    :height "0%"
    :anchor "right top")
  (system-menu))
