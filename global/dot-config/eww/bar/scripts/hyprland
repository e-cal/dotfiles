#!/usr/bin/env bash

# define colors
#        red       peach     green     blue
colors=("#f38ba8" "#fab387" "#a6e3a1" "#89b4fa")
focused="#fab387"
unfocused="#f2cdcd"

empty="#313244"

# get initial focused workspace
focusedws=$(hyprctl -j monitors | jq -r '.[] | select(.focused == true) | .activeWorkspace.id')

declare -A o=([1]=0 [2]=0 [3]=0 [4]=0 [5]=0 [6]=0 [7]=0 [8]=0 [9]=0)
declare -A monitormap
declare -A workspaces

# set color for each workspace
status() {
	if [ "${o[$1]}" -eq 1 ]; then
		if [[ $(isfocused $1) == "true" ]]; then
			echo -n "$focused"
		else
			echo -n "$unfocused"
		fi
	else
		echo -n "$empty"
	fi
}

# handle workspace create/destroy
workspace_event() {
	while read -r k v; do workspaces[$k]="$v"; done < <(hyprctl -j workspaces | jq -jr '.[] | .id, " ", .monitor, "\n"')
}

# handle monitor (dis)connects
monitor_event() {
	while read -r k v; do monitormap["$k"]=$v; done < <(hyprctl -j monitors | jq -jr '.[] | .name, " ", .id, "\n"')
}

# get all apps titles in a workspace

declare -A applist

update_applist() {
	for ws in "${!workspaces[@]}"; do
		apps=$(hyprctl -j clients | jq -jr '.[] | select(.workspace.id == '"$ws"' and .title != "") | .title + "\\n"' | sed 's/"/\\"/g')
        applist[$ws]="${apps%\\n}"
	done
}

applist() {
	echo "${applist[$1]}"
}

isfocused() {
	[[ "$focusedws" == "$1" ]] && echo "true" || echo "false"
}

# generate the json for eww
generate() {
	echo -n '{"workspaces": ['

	for i in {1..9}; do
		echo -n ''"$([ "$i" -eq 1 ] || echo ,)" '{"number": '"$i"', "color": "'"$(status "$i")"'", "focused": "'"$(isfocused "$i")"'", "tooltip": "'$(applist "$i")'" }'
	done

	echo '], "screencast": '"$screencast"'}'
}

# setup

# add monitors
monitor_event

# add workspaces
workspace_event

update_applist

# screen is not shared by default
screencast=false

# check occupied workspaces
for num in "${!workspaces[@]}"; do
	o[$num]=1
done
# generate initial widget
generate

# main loop
socat -u UNIX-CONNECT:/tmp/hypr/"$HYPRLAND_INSTANCE_SIGNATURE"/.socket2.sock - | rg --line-buffered "workspace|mon(itor)?|screencast|openwindow|closewindow" | while read -r line; do
	case ${line%>>*} in
	"workspace")
		workspace_event
		focusedws=${line#*>>}
		;;
	"focusedmon")
		focusedws=${line#*,}
		;;
	"createworkspace")
		o[${line#*>>}]=1
		;;
	"destroyworkspace")
		o[${line#*>>}]=0
		;;
	"monitor"*)
		monitor_event
		;;
	"screencast")
		screencast=$([ "$(echo "${line#*>>}" | awk -F, '{print $1}')" -eq 1 ] && echo true || echo false)
		;;
	"openwindow" | "closewindow")
		update_applist
		;;
	esac
	generate
done
