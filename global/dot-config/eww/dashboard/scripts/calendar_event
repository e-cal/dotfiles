#!/bin/python

from __future__ import print_function

import argparse
import datetime
import os

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# If modifying these scopes, delete the file token.json.
SCOPES = ["https://www.googleapis.com/auth/calendar.readonly"]
PATH = os.path.expanduser("~/.config/eww/")


def main():
    """Shows basic usage of the Google Calendar API.
    Prints the start and name of the next 10 events on the user's calendar.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists(f"{PATH}/token.json"):
        creds = Credentials.from_authorized_user_file(f"{PATH}/token.json", SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                f"{PATH}/credentials.json", SCOPES
            )
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(f"{PATH}/token.json", "w") as token:
            token.write(creds.to_json())

    try:
        service = build("calendar", "v3", credentials=creds)

        # Call the Calendar API
        now = datetime.datetime.utcnow().isoformat() + "Z"  # 'Z' indicates UTC time
        tomorrow = (datetime.datetime.utcnow() + datetime.timedelta(days=1)).isoformat() + "Z"  # fmt: skip
        events_result = (
            service.events()
            .list(
                calendarId="primary",
                timeMin=now,
                timeMax=tomorrow,
                maxResults=1,
                singleEvents=True,
                orderBy="startTime",
            )
            .execute()
        )
        events = events_result.get("items", [])

        if not events:
            return

        # for event in events:
        event = events[0]
        start = event["start"].get("dateTime", event["start"].get("date"))
        date, time = start.split("T")
        time = time.split("-")[0]
        return date, time, event["summary"]

    except HttpError:
        print("An error occurred")


if __name__ == "__main__":
    args = argparse.ArgumentParser()
    args.add_argument("--time", action="store_true")
    args.add_argument("--event", action="store_true")
    args.add_argument("--event2", action="store_true")
    args.add_argument("--open", action="store_true")
    args = args.parse_args()

    if args.open:
        cfg = os.path.join(os.environ["HOME"], ".config/eww/dashboard")
        components = ["background", "profile", "system", "clock", "cal", "music", "github", "hackernews", "twitter", "youtube", "weather", "apps", "mail", "logout", "sleep", "reboot", "poweroff", "folders"]  # fmt: skip
        os.system(f"eww --config {cfg} close {' '.join(components)}")
        os.system(f"rm -rf $HOME/.cache/eww_launch.dashboard")
        os.system(f"firefox https://calendar.cron.com")
        exit()

    res = main()
    if res is None:
        date = time = ""
        event = "No upcoming events"
    else:
        date, time, event = res
    event1 = event
    event2 = ""
    if len(event) > 12:
        event1 = ""
        event2 = ""
        for word in event.split(" "):
            if len(event1) + len(word) < 12:
                event1 += word + "|"
            else:
                event2 += word + "|"
        event1 = event1.replace("|", " ")
        event2 = event2.replace("|", " ")

    if args.time:
        if not date:
            print("-")
            exit()
        # today = datetime.datetime.now() - datetime.timedelta(days=2)
        today = datetime.datetime.now()
        out = ""
        if date == today.strftime("%Y-%m-%d"):
            out = "Today"
        # elif tomorrow
        elif date == (today + datetime.timedelta(days=1)).strftime("%Y-%m-%d"):
            out = "Tomorrow"
        else:
            # append day of week to out (Mon, Tue, Wed, etc.)
            out = datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%a")
        out += " " + time.split(":")[0] + ":" + time.split(":")[1]
        print(out)
        # print(time)
    elif args.event:
        print(event1)
    elif args.event2:
        print(event2)
    else:
        print(f"{date}|{time}|{event}")
