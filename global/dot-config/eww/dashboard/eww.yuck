;; ** Variables ***********************************************************************

;; Profile vars
(defvar IMAGE "images/profile.jpg")
(defvar NAME "ecal")
(defpoll HOST :interval "5m" `hostname`)

;; System vars
(defpoll BLIGHT :interval "10s" `brightness`)
(defpoll VOLUME :interval "10s" `volume`)

;; Time vars
(defpoll HOUR :interval "5s" `date +\"%I\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)
(defpoll MER :interval "5s" `date +\"%p\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)

;; Calendar event vars
(defpoll CALEVENT :interval "5m" `scripts/calendar_event --event`)
(defpoll CALEVENT2 :interval "5m" `scripts/calendar_event --event2`)
(defpoll CALDATE :interval "5m" `scripts/calendar_event --date`)
(defpoll CALTIME :interval "5m" `scripts/calendar_event --time`)
(defpoll CALMONTH :interval "30m" `date +\"%b\"`)
(defpoll CALDAY :interval "30m" `date +\"%d\"`)

;; Music vars
(defpoll SONG :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `scripts/music_info --artist`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)

;; Weather vars
(defpoll ICON :interval "15m" `weather --icon`)
(defpoll STAT :interval "15m" `weather --stat`)
(defpoll TEMP :interval "15m" `weather --temp`)
(defpoll FEELS :interval "15m" `weather --feels`)
(defpoll HEX :interval "15m" `weather --hex`)
(defpoll QUOTE :interval "15m" `weather --quote`)
(defpoll QUOTE2 :interval "15m" `weather --quote2`)

;; Apps vars
(defpoll MAILS :interval "5m" `scripts/mails`)


;; ** Widgets *************************************************************************


;; background
(defwidget bg [] 
	(box :class "bg")
)

;; profile
(defwidget user [] 
	(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text HOST)))

;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "cpubar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconcpu" :text "󰧑")
				(scale :min 0 :max 100 :value "${round(EWW_CPU.avg, 0)}" :active "false"))
			(box :class "membar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmem" :text "󰍛")
				(scale :min 0 :max 100 :value "${round(EWW_RAM.used_mem_perc, 0)}" :active "false"))
			(box :class "brightbar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbright" :text "󰃠")
				(scale :min 0 :max 100 :value BLIGHT :onchange "brightness set {};echo" :active "true"))
			(box :class "volbar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconvol" :text "󰕾")
				(scale :min 0 :max 105 :value VOLUME :onchange "volume set {}" :active "true")))))


(defwidget clock [] 
	(box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 0
			(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
			(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
		(box :orientation "v" :spacing 0 
			(label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text MER)
			(label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

(defwidget cal [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
                (button :onclick "scripts/calendar_event --open;echo" :class "calmonth" :valign "center" :halign "center" CALMONTH)
                (button :onclick "scripts/calendar_event --open;echo" :class "calday" :valign "center" :halign "center" CALDAY))
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "caltime" :halign "center" :justify "center" :wrap "true" :text CALTIME)
				(label :class "calevent" :halign "center" :justify "center" :wrap "true" :text CALEVENT)
				(label :class "calevent" :halign "center" :justify "center" :wrap "true" :limit-width 26 :text CALEVENT2)
            ))))

(defwidget music [] 
	(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" :onclick "scripts/music_info --prev" "玲")
				(button :class "btn_play" :onclick "scripts/music_info --toggle" STATUS)
				(button :class "btn_next" :onclick "scripts/music_info --next" "怜"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onchange "spotify-seek {}" :min 0 :active "true" :max 100 :value CURRENT)))))

;; github
(defwidget github [] 
	(box :class "github" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --gh" "")))

;; hackernews
(defwidget hackernews [] 
	(box :class "hackernews" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --hn" "")))

;; twitter
(defwidget twitter [] 
	(box :class "twitter" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --tw" "")))

;; youtube
(defwidget youtube [] 
	(box :class "youtube" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --yt" "")))

;; mail
(defwidget mail [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconmail" :onclick "scripts/open_links --mail" "")
			(box :class "mailbox" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "label_mails" :onclick "scripts/open_links --mail" MAILS)))))

;; weather
(defwidget weather [] 
	(box :class "genwin" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
				(label :class "label_temp" :halign "end" :text TEMP))
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "label_feels" :halign "end" :text "feels like ${FEELS}"))
			;;(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "label_stat" :text STAT))))
                ;;)

;; apps
(defwidget apps [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
            (button :style "background-image: url('images/icons/terminal.svg');" :class "app_terminal" :onclick "scripts/open_apps --term")
            (button :style "background-image: url('images/icons/firefox.svg');" :class "app_fox" :onclick "scripts/open_apps --firefox")
            (button :style "background-image: url('images/icons/calendar.svg');" :class "app_calendar" :onclick "scripts/open_apps --calendar"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/files.svg');" :class "app_files" :onclick "scripts/open_apps --files")
			(button :style "background-image: url('images/icons/gdrive.svg');" :class "app_gdrive" :onclick "scripts/open_apps --gdrive")
            (button :style "background-image: url('images/icons/spotify.svg');" :class "app_spotify" :onclick "scripts/open_apps --spotify"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/teams.svg');" :class "app_teams" :onclick "scripts/open_apps --teams")
			(button :style "background-image: url('images/icons/slack.svg');" :class "app_slack" :onclick "scripts/open_apps --slack")
            (button :style "background-image: url('images/icons/discord.svg');" :class "app_discord" :onclick "scripts/open_apps --discord"))))

;; power buttons
(defwidget poweroff [] 
    (box :class "genwin" :vexpand "false" :hexpand "false" 
        (button :class "btn_poweroff" :onclick "systemctl poweroff" "󰐥")))
(defwidget reboot [] 
    (box :class "genwin" :vexpand "false" :hexpand "false" 
        (button :class "btn_reboot" :onclick "systemctl reboot" "󰜉")))
(defwidget sleep [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_sleep" :onclick "systemctl suspend" "󰒲")))
(defwidget logout [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_logout" :onclick "loginctl terminate-session $(loginctl session-status | head -n1 | awk '{print $1}')" "󰿅")))

;; folders
(defwidget folders [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :class "hddicon" :onclick "scripts/open_apps --fm" "")
				(label :class "fs_sep" :text "|"))
			(box :space-evenly "false" :vexpand "false" :hexpand "false" 
				;;(label :class "hdd_label" :wrap "true" :limit-width 25 :text "${round(EWW_DISK["/"].used_perc, 0)}%")))
				(label :class "hdd_label" :wrap "true" :limit-width 25 :text "${round(EWW_DISK["/"].free / 1024 / 1024 / 1024, 0)}GB")))

		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder1" :onclick "scripts/open_folders --home" "󱂵")
			(button :class "label_folder1" :onclick "scripts/open_folders --home" "Home"))

		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder2" :onclick "scripts/open_folders --dl" "󰉍")
			(button :class "label_folder2" :onclick "scripts/open_folders --dl" "Downloads"))

		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder3" :onclick "scripts/open_folders --cloud" "󰴋")
			(button :class "label_folder3" :onclick "scripts/open_folders --cloud" "Cloud"))

		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder4" :onclick "scripts/open_folders --img" "󰉏")
			(button :class "label_folder4" :onclick "scripts/open_folders --img" "Images"))

		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder5" :onclick "scripts/open_folders --cfg" "󱁿")
			(button :class "label_folder5" :onclick "scripts/open_folders --cfg" "~/.config"))

		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder6" :onclick "scripts/open_folders --local" "󰚝")
			(button :class "label_folder6" :onclick "scripts/open_folders --local" "~/.local"))))


;; ** Windows *************************************************************************


;; background
(defwindow background :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 0 :y 0 :width "1920px" :height "1080px")
					(bg))

;; profile
(defwindow profile :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 150 :y 150 :width 350 :height 440)
					(user))

;; system
(defwindow system :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 150 :y 605 :width 350 :height 325)
					(system))

;; clock
(defwindow clock :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 515 :y 150 :width 350 :height 155)
					(clock))

;; calendar
(defwindow cal :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 515 :y 320 :width 350 :height 155)
					(cal))

;; music
(defwindow music :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 515 :y 490 :width 610 :height 280)
					(music))

;; github
(defwindow github :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 515 :y 785 :width 141 :height 145)
					(github))

;; hackernews
(defwindow hackernews :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 671 :y 785 :width 141 :height 145)
					(hackernews))

;; twitter
(defwindow twitter :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 827 :y 785 :width 141 :height 145)
					(twitter))

;; youtube
(defwindow youtube :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 983 :y 785 :width 142 :height 145)
					(youtube))

;; weather
(defwindow weather :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 880 :y 150 :width 550 :height 325)
					(weather))

;; apps
(defwindow apps :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 1140 :y 490 :width 290 :height 280)
					(apps))

;; mail
(defwindow mail :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 1140 :y 785 :width 290 :height 145)
					(mail))

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 :monitor 0 
    :geometry (geometry :x 1445 :y 150 :width 155 :height 155)
                (poweroff))

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :screen 1 :monitor 0 
    :geometry (geometry :x 1615 :y 150 :width 155 :height 155)
                (reboot))

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 1445 :y 320 :width 155 :height 155)
					(sleep))

;; logout
(defwindow logout :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 1615 :y 320 :width 155 :height 155)
					(logout))

;; folders
(defwindow folders :stacking "fg" :focusable "false" :screen 1 :monitor 0 
	    :geometry (geometry :x 1445 :y 490 :width 325 :height 440)
					(folders))
